{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_Cname",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_proposal",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "addCandidate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_Vname",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "vEAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"name": "addVoter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "candidates",
				"outputs": [
					{
						"internalType": "string",
						"name": "Cname",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "candidateId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "proposal",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "CEAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "candidateId",
						"type": "uint256"
					}
				],
				"name": "displayCandidateProfile",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "candId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "proposal",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "candidateName",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "vEAddress",
						"type": "address"
					}
				],
				"name": "displayVoterProfile",
				"outputs": [
					{
						"internalType": "string",
						"name": "voterName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "votedCandidate",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "voterIsDelegated",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "endElection",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "candidateId",
						"type": "uint256"
					}
				],
				"name": "getCandidateElectionEsult",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "candId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "candidateName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "votes",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinner",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "winningVoteCount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "winnerId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "winnerName",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "voterId",
						"type": "uint256"
					}
				],
				"name": "giveRightToVote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "startElection",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "candidateId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "vEAddress",
						"type": "address"
					}
				],
				"name": "vote",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "voters",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "voterId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "weight",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "Vname",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "age",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "votedTo",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "VEAddress",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Ankit Bhardwaj",
			"details": "Impelements replacement for traditional electronic voting  solutions with distributed, non-repudiation, and security  protection characteristics",
			"kind": "dev",
			"methods": {
				"addCandidate(string,string,address)": {
					"details": "To find eligibility of the voter.",
					"params": {
						"_Cname": "of the current voter",
						"_owner": "of the current voter",
						"_proposal": "of the current voter"
					}
				},
				"addVoter(string,address,address)": {
					"details": "To find eligibility of the voter.",
					"params": {
						"_Vname": "of the current voter",
						"_owner": "of the current voter",
						"vEAddress": "of the current voter"
					}
				},
				"constructor": {
					"details": "Creates a new voting system to choose one of 'candidates'"
				},
				"displayCandidateProfile(uint256)": {
					"details": "Display candidate profile.",
					"params": {
						"candidateId": "candidate id of the candidate"
					}
				},
				"displayVoterProfile(address)": {
					"details": "Display candidate profile.",
					"params": {
						"vEAddress": "ethereum address of the voter"
					}
				},
				"endElection(address)": {
					"details": "To End voting"
				},
				"getCandidateElectionEsult(uint256)": {
					"details": "Get election result candidate wise.",
					"params": {
						"candidateId": "candidate id of the candidate"
					}
				},
				"getWinner()": {
					"details": "sends the winner"
				},
				"giveRightToVote(uint256)": {
					"details": "Give 'voter' the right to vote on this ballot. May only be called by 'admin'.",
					"params": {
						"voterId": "id of voter"
					}
				},
				"startElection(address)": {
					"details": "To start voting"
				},
				"vote(uint256,address)": {
					"details": "Give your vote to candidate.",
					"params": {
						"candidateId": "of the candidate",
						"vEAddress": "of the voter to avoid re-entry"
					}
				}
			},
			"title": "Electronic Voting System",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ElectronicVoting.sol": "ElectronicVoting"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ElectronicVoting.sol": {
			"keccak256": "0xda12afbf687e7c7cbb832af85fcbde0a9500b4e2847d26342d9c2d7019476856",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8dd5d963a83cc0bb71880ac591830a535cd96c31219a44cb95b6972964326131",
				"dweb:/ipfs/QmeY22mcWcQDJEFfQ1sBqkBnMB65eWD7cnTq6udo1ExhLe"
			]
		},
		"contracts/Types.sol": {
			"keccak256": "0xfd8fc33bb86ac66a407af4c5e752dc10ce3430cab9b2a7f86d74de00db2dc45b",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e3f46b2753ac456ee6fd15a89c045c2aaca873d765e02329ee10e31f4b52ef35",
				"dweb:/ipfs/QmZFwUmkxsHPUHwNnuuPXu9hnu72vWGFwGexBmwxECGbQJ"
			]
		}
	},
	"version": 1
}